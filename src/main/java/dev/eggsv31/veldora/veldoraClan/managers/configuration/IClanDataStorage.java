package dev.eggsv31.veldora.veldoraClan.managers.configuration;

import dev.eggsv31.veldora.veldoraClan.config.language.YamlLangManager;
import dev.eggsv31.veldora.veldoraClan.managers.clan.ClanStatsManager;
import dev.eggsv31.veldora.veldoraClan.storage.DataStorage;
import org.bukkit.ChatColor;
import org.bukkit.OfflinePlayer;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.entity.Player;
import org.bukkit.plugin.java.JavaPlugin;
import java.io.File;
import java.util.List;
import java.util.Map;
import java.util.UUID;

public interface IClanDataStorage {
    JavaPlugin getPlugin();
    File getClanFolder();
    DataStorage getDataStorage();
    ConfigManager getConfigManager();
    ClanStatsManager getClanStatsManager();
    boolean isMemberStorageAccessAllowed(String clanName);
    void setMemberStorageAccess(String clanName, boolean allowed);
    void setLangManager(YamlLangManager langManager);
    void saveAllClansToDisk();
    List<String> getAllClans();
    FileConfiguration getClanConfig(String clanName);
    void saveClanConfig(FileConfiguration config, String clanName);
    String getDbType();
    String getPlayerClan(OfflinePlayer offlinePlayer);
    boolean isClanLeader(Player player);
    void createClan(String clanName, Player player);
    void deleteClan(String clanName, Player player);
    int getTotalClans();
    void showClanInfo(Player player, String clanName);
    int getClanRanking();
    List<String> getPlayerNames(List<String> uuids);
    List<String> getClanMembers(String clanName);
    void setClanLeader(Player newLeader, String clanName);
    void setClanColor(String clanName, ChatColor color);
    ChatColor getClanColor(String clanName);
    long getLastColorChangeTime(String clanName);
    void setLastColorChangeTime(String clanName, long currentTime);
    String getClanLeader(String clanName);
    List<Player> getOnlineClanMembers(String clanName);
    int getClanKills(String clanName);
    int getClanDeaths(String clanName);
    long getLastRenameTime(String clanName);
    void setLastRenameTime(String clanName, long currentTime);
    void renameClan(String oldName, String newName);
    List<String> getClanAllies(String clanName);
    void fixClanFiles();
    boolean clanExists(String clanName);
    boolean clanExistsIgnoreCase(String clanName);
    int getTotalJoined(String clanName);
    void incrementTotalJoined(String clanName);
    int getTotalLeft(String clanName);
    void incrementTotalLeft(String clanName);
    int getTotalKicked(String clanName);
    void incrementTotalKicked(String clanName);
    List<String> getJoinedUUIDs(String clanName);
    List<String> getLeftUUIDs(String clanName);
    List<String> getKickedUUIDs(String clanName);
    long getLeaderLastLogin(String clanName);
    void setLeaderLastLogin(String clanName, long lastLogin);
    int getInviteSentCount(String clanName);
    void incrementInviteSentCount(String clanName);
    int getInviteAcceptedCount(String clanName);
    void incrementInviteAcceptedCount(String clanName);
    int getInviteRejectedCount(String clanName);
    void incrementInviteRejectedCount(String clanName);
    void setMemberJoinDate(String clanName, UUID playerUUID, long joinDate);
    long getMemberJoinDate(String clanName, UUID playerUUID);
    void setMemberLastLogin(String clanName, UUID playerUUID, long lastLogin);
    long getMemberLastLogin(String clanName, UUID playerUUID);
    void addAllyInviteLog(String fromClan, String toClan, long timestamp, String status);
    List<Map<String, Object>> getAllyInviteLogs(String clanName);
    void addRivalInviteLog(String fromClan, String toClan, long timestamp, String status);
    List<Map<String, Object>> getRivalInviteLogs(String clanName);
    void setDiscordLink(UUID playerUuid, long discordId);
    Long getDiscordId(UUID playerUuid);
    UUID getPlayerUuidByDiscordId(long discordId);
}
