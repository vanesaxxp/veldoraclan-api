plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'maven-publish'
}

group = 'org.VeldoraClan'
version = '0.3.5'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        name = "placeholderapi"
        url = "https://repo.extendedclip.com/content/repositories/placeholderapi/"
    }
    maven {
        name = "destroystokyo"
        url = "https://papermc.io/repo/repository/maven-public/"
    }
    maven {
        name = "vault"
        url = "https://jitpack.io"
    }
    maven {
        name = "enginehub"
        url = "https://maven.enginehub.org/repo/"
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId = 'veldoraclan-api'
        }
    }
    repositories {
        mavenLocal()
    }
}

dependencies {
    compileOnly("com.destroystokyo.paper:paper-api:1.16.5-R0.1-SNAPSHOT")
    compileOnly("me.clip:placeholderapi:2.11.6")
    compileOnly("com.github.MilkBowl:VaultAPI:1.7")
    compileOnly("com.mojang:authlib:3.13.56")
    compileOnly("com.sk89q.worldguard:worldguard-bukkit:7.0.7")
    compileOnly files('src/main/resources/SCore.jar')
    compileOnly("com.gitlab.ruany:LiteBansAPI:0.6.1")
    implementation("com.github.DevLeoko.AdvancedBan:AdvancedBan-Bukkit:2.3.0")
    implementation("net.kyori:adventure-api:4.19.0")
    implementation("net.kyori:adventure-text-minimessage:4.19.0")
    implementation("net.kyori:adventure-platform-bukkit:4.3.4")
    implementation("org.bstats:bstats-bukkit:3.1.0")
    implementation("org.yaml:snakeyaml:2.2")
    implementation files("$projectDir/allatori/allatori-annotations.jar")
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: project.version]
    inputs.properties(props)
    filteringCharset = 'UTF-8'
    filesMatching('plugin.yml') {
        expand(props)
    }
}

shadowJar {
    archiveClassifier.set('')
    minimize()
    relocate 'org.bstats', 'bstats'
    relocate 'org.yaml', 'yaml'
}

tasks.register('copyAllatoriConfig') {
    doLast {
        copy {
            from("$projectDir/allatori")
            include("allatori.xml")
            into("$buildDir/allatori")
            expand(
                    inputJar: "${buildDir}/libs/${project.name}-${project.version}.jar".toString().replace("\\", "/"),
                    outputJar: "${buildDir}/libs/${project.name}-${project.version}-obf.jar".toString().replace("\\", "/"),
                    logFile: "${buildDir}/allatori/obfuscation-log.xml".toString().replace("\\", "/"),
                    classpathJars: configurations.runtimeClasspath.asPath.replace("\\", "/")
            )
        }
        println "Copied allatori.xml to $buildDir/allatori with expanded variables."
    }
}

tasks.register('runAllatori') {
    dependsOn 'copyAllatoriConfig', 'shadowJar'
    doLast {
        def allatoriJar = "${projectDir}/allatori/allatori.jar".replace("\\", "/")
        def configFile = "${buildDir}/allatori/allatori.xml".replace("\\", "/")
        def inputJar = "${buildDir}/libs/${project.name}-${project.version}.jar".replace("\\", "/")
        def outputJar = "${buildDir}/libs/${project.name}-${project.version}-obf.jar".replace("\\", "/")
        println "Running Allatori Obfuscation..."
        println "Allatori JAR: $allatoriJar"
        println "Configuration File: $configFile"
        println "Input JAR: $inputJar"
        println "Output JAR: $outputJar"
        exec {
            executable = "${System.getProperty('java.home')}/bin/java"
            args = ['-Xms128m', '-Xmx512m', '-jar', allatoriJar, configFile]
        }
        copy {
            from("${buildDir}/allatori/obfuscated.jar".replace("\\", "/"))
            into("${buildDir}/libs".replace("\\", "/"))
            rename { fileName -> fileName.replace("obfuscated.jar", "${project.name}-${project.version}-obf.jar") }
        }
    }
}

tasks.build.dependsOn 'runAllatori'
